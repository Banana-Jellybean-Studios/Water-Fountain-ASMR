using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;
using SplineMesh;
using DG.Tweening;

[ExecuteInEditMode]
[RequireComponent(typeof(Spline))]
public class ContortAlong : MonoBehaviour
{
	private Spline spline;
	private MeshBender meshBender;

	[HideInInspector]
	public GameObject generated;

	public Mesh mesh;
	public Material material;
	public Vector3 rotation;
	public Vector3 scale;

	public Vector3 startScale;
	public Vector3 targetScale;
	[Range(0, 1)] private float lerp;
	[SerializeField] private float scaleDuration = 1f;
	[SerializeField] private Ease scaleEase = Ease.OutBack;
	[SerializeField] private float moveStartDuration = 1f;
	[SerializeField] private float moveSpeed;

	private void Start()
	{
		Init();
	}

	private void Update()
	{
		if (generated != null && lerp < 1)
		{
			meshBender.SetInterval(spline, spline.Length * lerp);
			meshBender.ComputeIfNeeded();
		}
	}

	[ContextMenu("SplashWater")]
	public void SplashWater()
	{
		StartCoroutine(Splash());
	}

	private IEnumerator Splash()
	{
		meshBender.Source = meshBender.Source.Scale(startScale);

		lerp = 0;

		GameObject curObj = new GameObject();

		curObj.transform.localScale = startScale;
		curObj.transform.DOScale(targetScale, scaleDuration).SetEase(scaleEase);

		float time = 0;

		//Scale
		while (true)
		{
			yield return new WaitForFixedUpdate();

			time += Time.deltaTime;

			if (lerp < 1)
			{
				if (time > moveStartDuration) lerp += moveSpeed * Time.deltaTime;

				if (time < scaleDuration) meshBender.Source = meshBender.Source.Scale(curObj.transform.localScale);
			}

			else break;
		}

		Destroy(curObj);
	}

	private void Init()
	{
		string generatedName = "generated by " + GetType().Name;
		var generatedTranform = transform.Find(generatedName);
		generated = generatedTranform != null ? generatedTranform.gameObject : UOUtility.Create(generatedName, gameObject,
			typeof(MeshFilter),
			typeof(MeshRenderer),
			typeof(MeshBender));

		generated.GetComponent<MeshRenderer>().material = material;

		meshBender = generated.GetComponent<MeshBender>();
		spline = GetComponent<Spline>();

		meshBender.Source = SourceMesh.Build(mesh)
			.Rotate(Quaternion.Euler(rotation))
			.Scale(scale);
		meshBender.Mode = MeshBender.FillingMode.Once;
		meshBender.SetInterval(spline, 0);
	}
}
